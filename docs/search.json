[{"path":"/articles/analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"analysis","text":"Pick data set wish TidyTuesday analyze analyze Starbucks data TidyTuesday must describe question aim answer data data analysis studying caloric content Starbucks drinks. amount relationship total calories explained serving size among different types drinks Starbucks AKA coefficient determination AKA R-Squared? must describe link original data come chose.must include link data dictionary data create one inside webpage. Load data R step, must test directory named data exists locally. , write R function creates programmatically.Saves data (time knit/render document). Read data locally time knit/render.","code":"if (!file.exists(here(\"data\", \"starbucks.csv\"))){     url_csv <- \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-21/starbucks.csv\"     sauces <- readr::read_csv(url_csv)     } starbucks <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-21/starbucks.csv')"},{"path":"/articles/analysis.html","id":"data-wrangling","dir":"Articles","previous_headings":"","what":"Data wrangling","title":"analysis","text":"analysis must include form data wrangling data visualization.must use least six different functions dplyr, tidyr, lubridate, stringr, forcats. Remove rows cappuccino sizes Now make sizes factor using forcats Now check levels drink sizes must use least two functions purrr. code via ChatGPT code via ChatGPT analysis include least three plots using least three different geom_() functions ggplot2 (another package geom_() functions). Plots titles, subtitles, captions, human-understandable axis labels. least one plot using type faceting (facet_grid() facet_wrap()).","code":"starbucks <- starbucks %>%               mutate(`calories/ml` = calories / serv_size_m_l)  starbucks <- starbucks %>%               mutate(`caffeine/ml` = caffeine_mg / serv_size_m_l) drinks <- starbucks %>%   mutate(type = case_when(     str_detect(product_name, regex(\"chocolate\", ignore_case = TRUE)) ~ \"Chocolate\",     str_detect(product_name, \"Mocha\") ~ \"Mocha\",     str_detect(product_name, regex(\"coffee\", ignore_case = TRUE)) ~ \"Coffee\",     str_detect(product_name, regex(\"espresso\", ignore_case = TRUE)) ~ \"Espresso\",     str_detect(product_name, \"Latte\") ~ \"Latte\",     TRUE ~ \"Other\"   )) drinks <- starbucks %>%   mutate(type = case_when(     str_detect(product_name, regex(\"chocolate\", ignore_case = TRUE)) ~ \"Chocolate\",     str_detect(product_name, \"Mocha\") ~ \"Mocha\",     str_detect(product_name, regex(\"coffee\", ignore_case = TRUE)) ~ \"Coffee\",     str_detect(product_name, regex(\"espresso\", ignore_case = TRUE)) ~ \"Espresso\",     str_detect(product_name, \"Latte\") ~ \"Latte\",     TRUE ~ \"Other\"   )); beep_on_error(expr, sound = 1) drinks <- drinks[!(   drinks$size == \"solo\" |   drinks$size == \"doppio\" |   drinks$size == \"triple\" |   drinks$size == \"quad\" |   drinks$size == \"1 scoop\" |   drinks$size == \"1 shot\"), ] drinks <- drinks %>%   mutate(size = as_factor(size)) levels(drinks$size) #> [1] \"short\"  \"tall\"   \"grande\" \"venti\"  \"trenta\" rsquared <- drinks %>%   filter(!is.na(calories) & !is.na(serv_size_m_l)) %>%     group_by(type) %>%   filter(n() > 2) %>%     ungroup() %>%   split(.$type) %>%   map(safely(~lm(calories ~ serv_size_m_l, data = .))) %>%    map(\"result\") %>%   map_dfr(~if (is.null(.x)) { NA_real_ } else { summary(.x)$r.squared }) rsquared <- drinks %>%   filter(!is.na(calories) & !is.na(serv_size_m_l)) %>%     group_by(type) %>%   filter(n() > 2) %>%     ungroup() %>%   split(.$type) %>%   map(safely(~lm(calories ~ serv_size_m_l, data = .))) %>%    map(\"result\") %>%   map_dfr(~if (is.null(.x)) { NA_real_ } else { summary(.x)$r.squared }); beep_on_error(expr, sound = 1) report <- drinks %>%    group_by(type) %>%   summarize(mean_calories = mean(calories, na.rm = TRUE),             mean_caffeine = mean(caffeine_mg, na.rm = TRUE),             mean_serv_size_ml = mean(serv_size_m_l, na.rm = TRUE))"},{"path":"/articles/analysis.html","id":"plot-1","dir":"Articles","previous_headings":"","what":"Plot 1","title":"analysis","text":"","code":"ggplot(drinks) +  aes(x = size, y = calories) +  geom_boxplot(fill = \"#112446\") +  labs(x = \"Size of drink\",   y = \"Total Calories\", title = \"Trends in calories by size of drink\", subtitle = \"An analysis of Starbucks products\") +  ggthemes::theme_base()"},{"path":"/articles/analysis.html","id":"plot-2","dir":"Articles","previous_headings":"","what":"Plot 2","title":"analysis","text":"","code":"ggplot(drinks) +   aes(x = `calories/ml`, fill = type, colour = type) +   geom_histogram(bins = 30L) +   scale_fill_hue(direction = 1) +   scale_color_hue(direction = 1) +   labs(     x = \"Calorie/ml\",     y = \"Number of drinks\",     title = \"Caloric density by different types of drinks\",     subtitle = \"Nutritional factors of Starbucks drinks\"   ) +   theme_minimal() +   theme(     plot.title = element_text(size = 17L,     face = \"bold\",     hjust = 0.5),     plot.subtitle = element_text(face = \"italic\",     hjust = 0.5)   ) +   facet_wrap(vars(type))"},{"path":"/articles/analysis.html","id":"plot-3","dir":"Articles","previous_headings":"","what":"Plot 3","title":"analysis","text":"Apply least 2 functions R package vignette. beep() beep_on_error() used . Relevant code chunks changed eval=FALSE file knit beepr functions.","code":"ggplot(report, aes(x = type, y = mean_caffeine, fill = mean_calories)) +   geom_col() +   scale_fill_gradient() +   labs(     x = \"Type of drink\",     y = \"Mean caffeine (mg)\",     title = \"Differences in mean caffeine and calories by type of drink\",     subtitle = \"Nutritional factors of Starbucks drinks\"   ) +   theme_minimal() beep(sound = 3)"},{"path":"/articles/analysis.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"analysis","text":"Summarize interpret results 1-2 sentences. analysis seeks describe relationship total calories explained serving size among different types drinks Starbucks AKA coefficient determination AKA R-Squared? Chocolate drinks highest R-squared calories serving size, indicating amount variance explained volume highest among chocolate type drinks Starbucks. Based plots also see differences mean caffeine calories types drinks. end data analysis, list functions used packages (dplyr, tidyr, ggplot2, etc) help TA respect making sure met requirements described .","code":"print(rsquared) #> # A tibble: 1 × 6 #>   Chocolate Coffee Espresso Latte Mocha Other #>       <dbl>  <dbl>    <dbl> <dbl> <dbl> <dbl> #> 1     0.711  0.269    0.274 0.461 0.535 0.226"},{"path":"/articles/analysis.html","id":"functions-used","dir":"Articles","previous_headings":"","what":"Functions used","title":"analysis","text":"dplyr::group_by forcats::levels forcats::as_factor dplyr::filter stringr::str_detect purrr::map_dfr dplyr::mutate","code":""},{"path":"/articles/analysis.html","id":"sources","dir":"Articles","previous_headings":"","what":"Sources:","title":"analysis","text":"Chatgpt. ChatGPT. (n.d.). https://openai.com/chatgpt https://stackoverflow.com/questions/25654845/-can--create--text-box---note--markdown","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rasmus Bååth. Author, maintainer. Amanda Dobbyn. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bååth R (2023). beepr: Easily Play Notification Sounds Platform. R package version 1.3, https://github.com/rasmusab/beepr.","code":"@Manual{,   title = {beepr: Easily Play Notification Sounds on any Platform},   author = {Rasmus Bååth},   year = {2023},   note = {R package version 1.3},   url = {https://github.com/rasmusab/beepr}, }"},{"path":"/index.html","id":"beepr-easily-play-notification-sounds-on-any-platform","dir":"","previous_headings":"","what":"Easily Play Notification Sounds on any Platform","title":"Easily Play Notification Sounds on any Platform","text":"beepr R package contains one main function, beep(), one purpose: make easy play notification sounds whatever platform . intended useful, example, running long analysis background want know ready. derivative function, beep_on_error(), wraps expression beep error occurs expression evaluated. package previously called pingr included ping() function. renamed order confused Unix tool ping. rationale behind beepr see original announcement: http://sumsar.net/blog/2014/01/announcing-pingr/","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Easily Play Notification Sounds on any Platform","text":"beepr available CRAN can installed within R running: can also grab development version beepr directly github:","code":"install.packages(\"beepr\") library(devtools) install_github(\"rasmusab/beepr\")"},{"path":"/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Easily Play Notification Sounds on any Platform","text":"using Windows OS X beepr relies audio package sound playback external program needed. ’re Linux beepr relies either paplay utility Pulse Audio system, aplay utility ALSA system VLC media player installed PATH. Chances alread one . Debian/Ubuntu can otherwise get VLC running following terminal:","code":"sudo apt-get install vlc"},{"path":"/index.html","id":"details","dir":"","previous_headings":"","what":"Details","title":"Easily Play Notification Sounds on any Platform","text":"beep() plays short sound useful want get notified, example, script finished. added bonus number different sounds choose .","code":""},{"path":"/index.html","id":"usage","dir":"","previous_headings":"Details","what":"Usage","title":"Easily Play Notification Sounds on any Platform","text":"beep(sound = 1, expr = NULL)","code":""},{"path":"/index.html","id":"arguments","dir":"","previous_headings":"Details","what":"Arguments","title":"Easily Play Notification Sounds on any Platform","text":"sound character string number specifying sound played either specifying one built sounds specifying path wav file. default 1. Possible sounds : “ping” “coin” “fanfare” “complete” “treasure” “ready” “shotgun” “mario” “wilhelm” “facebook” “sword” sound match sounds , valid path, random sound played. expr optional expression executed sound.","code":""},{"path":"/index.html","id":"examples","dir":"","previous_headings":"Details","what":"Examples","title":"Easily Play Notification Sounds on any Platform","text":"","code":"# Update all packages and \"ping\" when it's ready update.packages(ask=FALSE); beep()  #Play a fanfare instead of a \"ping\". beep(\"fanfare\") #or beep(3)  # Play a random sound beep(0)  # Play a sound if an error occurs beep_on_error(1 + \"a\", sound = \"wilhelm\")"},{"path":"/reference/beep.html","id":null,"dir":"Reference","previous_headings":"","what":"Play a short sound — beep","title":"Play a short sound — beep","text":"beep plays short sound useful want get notified,  example, script finished. added bonus number  different sounds choose .","code":""},{"path":"/reference/beep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Play a short sound — beep","text":"","code":"beep(sound = 1, expr = NULL)"},{"path":"/reference/beep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Play a short sound — beep","text":"sound character string number specifying sound played  either specifying one built sounds, specifying path wav  file specifying url. default 1. Possible sounds : \"ping\" \"coin\" \"fanfare\" \"complete\" \"treasure\" \"ready\" \"shotgun\" \"mario\" \"wilhelm\" \"facebook\" \"sword\" sound match sounds , valid path url, random sound played. Currently beep can handle http urls, https supported. expr optional expression excecuted sound.","code":""},{"path":"/reference/beep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Play a short sound — beep","text":"beep able play sound warning issued rather  error. order risk aborting stopping process wanted get notified .","code":""},{"path":"/reference/beep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Play a short sound — beep","text":"","code":"# Play a \"ping\" sound beep()  if (FALSE) { # Play a fanfare instead of a \"ping\". beep(\"fanfare\") # or beep(3)  # Play a random sound beep(0)  # Update all packages and \"ping\" when it's ready update.packages(ask=FALSE); beep() }"},{"path":"/reference/beep_on_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Play a short sound if there is an error — beep_on_error","title":"Play a short sound if there is an error — beep_on_error","text":"beep_on_error wraps expression plays short sound  error occurs.","code":""},{"path":"/reference/beep_on_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Play a short sound if there is an error — beep_on_error","text":"","code":"beep_on_error(expr, sound = 1)"},{"path":"/reference/beep_on_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Play a short sound if there is an error — beep_on_error","text":"expr expression evaluated errors. sound character string number specifying sound played  either specifying one built sounds, specifying path wav  file specifying url. default 1. Possible sounds : \"ping\" \"coin\" \"fanfare\" \"complete\" \"treasure\" \"ready\" \"shotgun\" \"mario\" \"wilhelm\" \"facebook\" \"sword\" sound match sounds , valid path url, random sound played. Currently beep can handle http urls, https supported.","code":""},{"path":"/reference/beep_on_error.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Play a short sound if there is an error — beep_on_error","text":"beep able play sound warning issued rather  error. order risk aborting stopping process wanted get notified .","code":""},{"path":"/reference/beep_on_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Play a short sound if there is an error — beep_on_error","text":"","code":"# Play a \"ping\" sound if \\code{expr} produces an error beep_on_error(log(\"foo\")) #> An error occurred in log(\"foo\"): non-numeric argument to mathematical function  # Stay silent if \\code{expr} does not produce an error beep_on_error(log(1)) #> [1] 0  if (FALSE) { # Play the Wilhelm scream instead of a ping on error. beep_on_error(runif(\"bar\"), \"wilhelm\") }"},{"path":"/reference/beepr.html","id":null,"dir":"Reference","previous_headings":"","what":"Easily Play Notification Sounds on any Platform — beepr","title":"Easily Play Notification Sounds on any Platform — beepr","text":"package contains one function, beep(), one purpose: make easy play notification sounds whatever platform . intended useful, example, running long analysis background want know ready.","code":""},{"path":"/reference/beepr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Easily Play Notification Sounds on any Platform — beepr","text":"package contains one main function beep, check  see . sound Windows MacOS beepr depends  audio package. sound Linux beepr depends either paplay utility Pulse Audio system, aplay utility ALSA system, VLC media player (http://www.videolan.org/vlc/index.html) installed PATH. Chances already one .","code":""},{"path":"/reference/beepr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Easily Play Notification Sounds on any Platform — beepr","text":"Rasmus Bååth < rasmus.baath@gmail.com >","code":""},{"path":"/reference/beepr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easily Play Notification Sounds on any Platform — beepr","text":"","code":"# Play a \"ping\" sound beep()"}]
